import unified from 'unified'
import markdown from 'remark-parse'
import { Parser as english } from 'retext-english'
import remark2retext from 'remark-retext'
import text from 'retext-stringify'
import path from 'path'
import { readVFile, writeFile } from '../common/files'

const template = data => `// Autogenerated. Do not edit.
var data = ${JSON.stringify(data)};
var index = new FlexSearch({
  doc: {
    id: 'id',
    field: [
      "file",
      "contents"
    ]
  }
});
index.add(data);
`

const geturl = filename =>
  filename
    .replace(/README\.md$/, 'index.md')
    .replace(/\.md$/, '')
    .concat('.html')

export default function search (config) {
  const files = [
    ...config.summary.prefix,
    ...config.summary.chapters,
    ...config.summary.suffix
  ]

  const processor = unified()
    .use(markdown)
    .use(remark2retext, english)
    .use(text)

  const cb = (file, id) => {
    const input = path.join(config.source, file.url)
    return readVFile(input)
      .then(processor.process)
      .then(data => ({
        id,
        file: geturl(file.url),
        title: file.title,
        contents: data.toString().replace(/\n/g, ' ')
      }))
  }

  const output = path.join(config.destination, 'search.js')

  return Promise.all(files.map(cb)).then(data =>
    writeFile(output, template(data))
  )
}
