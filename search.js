// Autogenerated. Do not edit.
var data = [{"id":0,"file":"index.html","title":"Markbook","contents":"Markbook  The user and developer guide to Markbook.  Markbook is a command-line tool that allows writers to author books written in CommonMark. It shares many concepts and similarities with both GitBook and mdBook.  This very guide is written in CommonMark, to serve as an example of how to use markbook.  Markbook is free and open source under the MIT license. The source code is available on GitHub at https://github.com/Symbitic/markbook. Feature requests, issues, and pull requests are all welcome.    "},{"id":1,"file":"cli/index.html","title":"Command Line Tool","contents":"Command Line Tool  Markbook will primarily be used as a command line tool.  Install From Binaries  Precompiled binaries for major platforms are comming soon.  Visit the releases page when precompiled binaries are ready.  Install From Source  Markbook can also be installed from source.  Markbook is written in Javascript, and can be built like any other Node.js project. Just open a terminal and run the following commands:    The executable output will be available at `./bin/markbook`."},{"id":2,"file":"cli/build.html","title":"build","contents":"`build`  The build command is used to render your book:    Markbook begins by parsing `SUMMARY.md` to understand the book's layout. It then reads and renders any files listed there.  The rendered output will maintain the same directory structure as the source for convenience. Large books will therefore remain structured when rendered.  Directory  By default, markbook will use the current directory. To use a different one, simply specify it on the command-line.    Note: Make sure to run the build command in the root directory and not in the source directory  Options  "},{"id":3,"file":"cli/init.html","title":"init","contents":"`init`  The init command generates a new book:    Directory  By default, markbook will use in the current directory. To have markbook use a different directory, simply give it as a commandline argument.    Options    If any of these three options are not given on the command-line, Markbook will prompt for them.  Non-required options can be empty."},{"id":4,"file":"cli/serve.html","title":"serve","contents":"`serve`  The serve command renders your book and then opens a HTTP server to preview it.    We will shortly be adding live-reload capabilities, that autoreloads the page when a change to one of the source files is detected.  Directory  By default, markbook will use the current directory. To use a different one, simply specify it on the command-line.    Options  "},{"id":5,"file":"config/index.html","title":"Configuration","contents":"Configuration  This chapter describes how to configure markbook."},{"id":6,"file":"config/summary.html","title":"SUMMARY.md","contents":"SUMMARY.md  The summary file is used by markbook to know what chapters to include, in what order they should appear, what their hierarchy is and where the source files are. Without this file, there is no book.  Even though `SUMMARY.md` is a markdown file, the formatting is very strict to allow for easy parsing. Let's see how you should format your `SUMMARY.md` file.  Format  Title It's common practice to begin with a title, generally `# Summary`. It is not mandatory; the parser just ignores it.  Prefix Chapter Before the main numbered chapters you can add a couple of elements that will not be numbered. This is useful for forewords, introductions, etc. There are however some constraints. You can not nest prefix chapters, they should all be on the root level. And you can not add prefix chapters once you have added numbered chapters.    Numbered Chapter Numbered chapters are the main content of the book, they will be numbered and can be nested, resulting in a nice hierarchy (chapters, sub-chapters, etc.)    You can either use `-` or `*` to indicate a numbered chapter.  Suffix Chapter After the numbered chapters you can add a couple of non-numbered chapters. They are the same as prefix chapters but come after the numbered chapters instead of before.  All other elements are unsupported and will be ignored (at best) or result in an error.  Example  Here is an example of the SUMMARY.md used for Markbook:  "},{"id":7,"file":"config/themes.html","title":"Themes","contents":"Markbook Themes  Markbook includes support for HTML/JS/CSS themes, using Handlebars as a template.  At this time, Markbook does not support user-chosen themes. We are working on it.  Files  Every theme is expected to contain a file named `index.hbs` in the root directory.  Besides that, any assets (CSS, JS, favicons) in the theme directory will be copied to the destination.  Configuration  The following variables are defined for every theme:    Some names may change before the next release."},{"id":8,"file":"writing/index.html","title":"Writing","contents":"Writing  This is the chapter intended for writers."},{"id":9,"file":"writing/commonmark.html","title":"CommonMark","contents":"CommonMark  Although the term Markdown is probably more familiar to most users, Markbook actually uses CommonMark.  CommonMark is a formally defined standard, unlike Markdown, which was originally nothing more than a perl script for a format that contained numerous parsing errors that newer implementations were forced to replicate.  CommonMark represented an industry-wide attempt to define a common markdown format, and included efforts by the creators of StackEdit and Pandoc. GitHub rewrote their GitHub Flavored Markdown (GFM) format to be an extension of CommonMark."},{"id":10,"file":"writing/extensions.html","title":"Markbook-Specific Extensions","contents":"  bibliography: bibliography.json  Markbook-Specific Extensions  Markbook implements a number of extensions to CommonMark, in order to make writing easier and to add support for extra features.  YAML/TOML  Custom metadata can be specified by placing YAML/TOML metadata at the top of a document.  YAML:    In this example, the title of the book will now be set to `Book` instead of `Chapter`.  Supported metadata fields include:    Superscript/Subscript  Markbook supports superscript and subscript syntax.    renders as: H~2~O    renders as: 21^st^ Century  Definition Lists  Markbook supports definition lists, similar to the ones used by pandoc.    renders as:  Term 1  : Definition 1  Footnotes  Footnotes are another feature whose syntax is borrowed from pandoc.    renders as:  Here is a footnote reference.^1  ^1: Here is the footnote.  Bibliography  Support for bibliographies is still limited. BibJSON is the only supported format, Books are the only supported type, and Chicago style is the only supported citation.  To include a list of references at the end of a document, just set the `bibliography` metadata field:    If bibliography.json is like this:    Then `Vulkan has better performance than OpenGL (@singh2016).` will be rendered as:  Vulkan has better performance than OpenGL (@singh2016).  An entry for \"Vulkan Essentials\" will then be included in the \"References\" section at the end.  Formats  Currently the following bibliographic formats are supported:  BibJSON  BibTex support is planned next.  Styles  Currently only Chicago-style citations are supported (and only books at that).  Support for more citation styles will be added later."},{"id":11,"file":"contributors.html","title":"Contributors","contents":"Contributors  Alex Shaw  If you feel you're missing from this list, feel free to add yourself in a PR."}];
var index = new FlexSearch({
  doc: {
    id: 'id',
    field: [
      "file",
      "contents"
    ]
  }
});
index.add(data);
