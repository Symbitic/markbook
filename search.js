// Autogenerated. Do not edit.
var data = [{"file":"README.md","contents":"Markbook\n\nThe user and developer guide to Markbook.\n\nMarkbook is a command-line tool that allows writers to author books written in CommonMark. It shares many concepts and similarities with both GitBook and mdBook.\n\nThis very guide is written in CommonMark, to serve as an example of how to use markbook.\n\nMarkbook is free and open source under the MIT license. The source code is available on GitHub at https://github.com/Symbitic/markbook. Feature requests, issues, and pull requests are all welcome.\n\n\n\n"},{"file":"cli/README.md","contents":"Command Line Tool\n\nMarkbook will primarily be used as a command line tool.\n\nInstall From Binaries\n\nPrecompiled binaries for major platforms are comming soon.\n\nVisit the releases page when precompiled binaries are ready.\n\nInstall From Source\n\nMarkbook can also be installed from source.\n\nMarkbook is written in Javascript, and can be built like any other Node.js project. Just open a terminal and run the following commands:\n\n\n\nThe executable output will be available at `./bin/markbook`."},{"file":"cli/build.md","contents":"`build`\n\nThe build command is used to render your book:\n\n\n\nMarkbook begins by parsing `SUMMARY.md` to understand the book's layout. It then reads and renders any files listed there.\n\nThe rendered output will maintain the same directory structure as the source for convenience. Large books will therefore remain structured when rendered.\n\nDirectory\n\nBy default, markbook will use the current directory. To use a different one, simply specify it on the command-line.\n\n\n\nNote: Make sure to run the build command in the root directory and not in the source directory\n\nOptions\n\n"},{"file":"cli/init.md","contents":"`init`\n\nThe init command generates a new book:\n\n\n\nDirectory\n\nBy default, markbook will use in the current directory. To have markbook use a different directory, simply give it as a commandline argument.\n\n\n\nOptions\n\n\n\nIf any of these three options are not given on the command-line, Markbook will prompt for them.\n\nNon-required options can be empty."},{"file":"cli/serve.md","contents":"`serve`\n\nThe serve command renders your book and then opens a HTTP server to preview it.\n\n\n\nWe will shortly be adding live-reload capabilities, that autoreloads the page when a change to one of the source files is detected.\n\nDirectory\n\nBy default, markbook will use the current directory. To use a different one, simply specify it on the command-line.\n\n\n\nOptions\n\n"},{"file":"config/README.md","contents":"Configuration\n\nThis chapter describes how to configure markbook."},{"file":"config/summary.md","contents":"SUMMARY.md\n\nThe summary file is used by markbook to know what chapters to include, in what order they should appear, what their hierarchy is and where the source files are. Without this file, there is no book.\n\nEven though `SUMMARY.md` is a markdown file, the formatting is very strict to allow for easy parsing. Let's see how you should format your `SUMMARY.md` file.\n\nFormat\n\nTitle It's common practice to begin with a title, generally # Summary. But it is not mandatory, the\nparser just ignores it. So you can too if you feel like it.\n\nPrefix Chapter Before the main numbered chapters you can add a couple\nof elements that will not be numbered. This is useful for forewords,\nintroductions, etc. There are however some constraints. You can not nest\nprefix chapters, they should all be on the root level. And you can not add\nprefix chapters once you have added numbered chapters.\n\n\n\nNumbered Chapter Numbered chapters are the main content of the book,\nthey will be numbered and can be nested, resulting in a nice hierarchy\n(chapters, sub-chapters, etc.)\n\n\n\n You can either use `-` or `*` to indicate a numbered chapter.\n\nSuffix Chapter After the numbered chapters you can add a couple of\nnon-numbered chapters. They are the same as prefix chapters but come after\nthe numbered chapters instead of before.\n\nAll other elements are unsupported and will be ignored at best or result in an error."},{"file":"config/themes.md","contents":"Markbook Themes\n\nMarkbook includes support for HTML/JS/CSS themes, using Handlebars as a template.\n\nAt this time, Markbook does not support user-chosen themes. We are working on it.\n\nFiles\n\nEvery theme is expected to contain a file named `index.hbs` in the root directory.\n\nBesides that, any assets (CSS, JS, favicons) in the theme directory will be copied to the destination.\n\nConfiguration\n\nThe following variables are defined for every theme:\n\n\n\nSome names may change before the next release."},{"file":"writing/README.md","contents":"Writing\n\nThis is the chapter intended for writers."},{"file":"writing/commonmark.md","contents":"CommonMark\n\nAlthough the term Markdown is probably more familiar to most users, Markbook\nactually uses CommonMark.\n\nCommonMark is a formally defined standard, unlike Markdown, which was originally\nnothing more than a perl script for a format that contained numerous\nparsing errors that newer implementations were forced to replicate.\n\nCommonMark represented an industry-wide attempt to define a common markdown\nformat, and included efforts by the creators of StackEdit and Pandoc. GitHub\nrewrote their GitHub Flavored Markdown (GFM) format to be an extension of\nCommonMark."},{"file":"writing/extensions.md","contents":"Markbook-Specific Extensions\n\nMarkbook implements a number of extensions to CommonMark. These are intended\nto make the process of writing more pleasant for developers."},{"file":"contributors.md","contents":"Contributors\n\nAlex Shaw\n\nIf you feel you're missing from this list, feel free to add yourself in a PR."}];
var fuse = new Fuse(data, {
  includeMatches: true,
  threshold: 0.3,
  location: 0,
  distance: 100,
  maxPatternLength: 32,
  minMatchCharLength: 3,
  keys: [ 'contents' ]
});
